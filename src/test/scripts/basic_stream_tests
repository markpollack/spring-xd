#!/bin/bash

. xdapi

TEST_DIR=/tmp/xdtest/basic

wait_for_server

rm -R $TEST_DIR &> /dev/null
set -e

echo -e '*** Test 1. time | log stream\n'

create_stream 'ticktock' 'time | log' 'false'
list_streams
deploy_stream 'ticktock'

echo -e '*** Test 2. time | jdbc stream\n'

create_stream 'timejdbc' 'time | jdbc'

echo -e '*** Test 3. http | file stream\n'

create_stream 'httptofile' "http | file --dir=$TEST_DIR"

post_data_and_check_result() {
  curl -d blah "$XD_HOST:9000"
  result=`cat $TEST_DIR/httptofile.out`

  if [[ $result != 'blah' ]]
  then
    echo -e "\nPosted HTTP data ($result) does not match file sink contents"
    exit 1
  fi
}

# Run, undeploy, redeploy and run again

post_data_and_check_result

rm -R $TEST_DIR &> /dev/null
undeploy_stream 'httptofile'

echo 'Redeploying and running again...'

deploy_stream 'httptofile'
list_streams
post_data_and_check_result

destroy_stream 'ticktock'
destroy_stream 'httptofile'
destroy_stream 'timejdbc'

echo -e '*** Test 4. tcp | file stream\n'

create_stream 'tcptofile' "tcp --port=21234 --socketTimeout=2000 | file --dir=$TEST_DIR"

echo -en 'blahblah\r\n' | netcat localhost 21234
sleep 2
destroy_stream 'tcptofile'

result=`cat $TEST_DIR/tcptofile.out`

if [[ $result != 'blahblah' ]]
then
  echo -e "\nTCP sent data ($result) does not match file sink contents"
  exit 1
fi

echo -e '\nAll Good :-)\n'
